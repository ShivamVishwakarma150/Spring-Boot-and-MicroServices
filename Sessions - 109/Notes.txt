How to disable Pre-instantiation on singleton scope spring beans?
============================================

Ans) By using lazy-init="true" we can disable pre-instantiation on singleton scope spring bean

    <bean id='dtdc' class="com.st.comp.DTDC" lazy-init="true"/>



Q)if lazy-init enabled singleton scope bean is dependent to singleton scope target spring bean class then what happens?
-------------------------------------------
Ans) The lazy-init enabled singleton scope spring bean also participates in pre-instantiation in supports the pre-instantiation of singleton scope target spring bean.


     <bean id="dtdc" class="com.st.comp.DTDC" lazy-init="true"/>

    <!-- cfg Target class -->
    <bean id="fpkt" class="com.st.comp.Flipkart">
        <property name="courier"  ref="dtdc"/>
    </bean>



Q) we have 10 spring beans cfg in spring bean cfg file.. how to enable pre-instantiation only 5 spring beans?
========================================

case1:: 

=>Take 5 spring beans as the singleton scope spring beans

=> Another 5 spring beans as the prototype scope spring beans

=> make sure that prototype spring beans are not taken as the dependent spring beans to singleton scope spring beans.


case2:: 

=>Take 5 spring beans as the singleton scope spring beans

=> Another 5 spring beans as the singleton scope spring beans by enabling lazy-init

=> make sure that lazy init enabled beans are not taken as the dependent spring beans to other singleton scope spring beans.



What is the use of the pre-instantiation of singleton spring beans in real projects?
==============================================

=> web application with BeanFactory container and not enabling <load-on-startup> on controller servlet


    request1 to web application :: 
    
    =>servlet loading , servlet instantiation + Initialization

    => spring beans loading ,spring beans instantiation, injections on spring beans

    => request processing operation.

    other than request1 to web application :: request processing
        1st request is taking more time compare to other than 1st request to words processing and generating generation because <load-on-startup> on servlet is not enabled + ApplicationContextContainer is not taken performing pre-instantiation of singleton scope spring beans.




web application with ApplicationContext container and enabling <load-on-startup> on controller servlet
============================================================================================


    During the deployment of the web application or during the server startup
    =========================================

    note: In web application we create IOC container in controller servlet comp.

    => servlet loading + servlet instantiation + servlet Initialization
    
    => IOC Container creation(AC), singleton scope spring bean loading, instantiation and injections takes place

    request1 to web application :: Directly request processing

    other than request1 to web application :: directly request processing

    request1 and other than request1 are taking same time to process the request.


==============================================
Features2 :: Ability to work with properties file and place holders 
==============================================

    properties file 
    ===============
    => The text file that maintains the entries in the form key=value pairs is called properties file 

    eg:
        info.txt 
        # personal info 
        per.name=Akash
        per.age=30
        per.address=Mumbai
            keys  = values 


in our Java Apps to keep jdbc properties we take the support of properties file .. It avoid hardcoding of jdbc properties allows us to modify jdbc properties with out touching the source code of the application.

    jdbc properties
    ================
        jdbc driver class name
        jdbc url
        db username
        db password

Q) In Spring Apps we cfg DataSource injecting jdbc properties in spring bean cfg file.. there it self (xml file) we are avoiding hard coding of jdbc properties what us the need of taking separate properties file in spring Apps.
Ans:-

Refer Notes.png

If there is 1 project with 10 modules.

Problem:
    if module1 to module9 code is gathering jdbc properties from properties file and 10th is gathering same properties from spring bean cfg file then any change in jdbc properties we need to modify in two places.. To get rid these problems use the the following solution as shown in the diagram,.

    solution :: make module10 which is developed in spring gathering jdbc properties from
    properties file through spring bean cfg file.   

    Ans2) While developing spring apps using 100% code driven cfgs and in spring boot mode we can not take the xml file as spring bean cfg file.. there we need to use properties file only.






Adding properties file support to MiniProject having jdbc properties
============================================================================================

step1) keep u r mini project app ready


step2) add jdbc.properties file in com.st.commons pkg of src/main/java folder
having jdbc properties of certain Db s/w of ur choice
    #jdbc properties
    jdbc.driver=oracle.jdbc.driver.OracleDriver
    jdbc.url=jdbc:oracle:thin:@localhost:1521:xe
    db.user=system
    db.pwd=Shivam12345

step3) cfg jdbc properties file in spring bean cfg file using <context:property-placeholder > tag

    in ApplicationContext.xml (import context name space using namespace tab)
    ==========================

    // this tag internally locates given properties file and also replaces the placeholder of InMemoryMetaData of spring bean cfg with the real values collected from properties file
    <context:property-placeholder location="com/st/commons/jdbc.properties"/>

step4) place the key of properties file as place holders while injected jdbc properties to DataSource configuration

    // placeholders having keys of the properties whose values will be replaced with the real values collected from the properties file 
      <!-- DataSource cfg -->
  <bean id="drds"  class="org.springframework.jdbc.datasource.DriverManagerDataSource">
      <property name="driverClassName" value="${jdbc.driver}"/>
      <property name="url" value="${jdbc.url}"/>
      <property name="username" value="${db.user}"/>
      <property name="password" value="${db.pwd}"/>
  </bean>
  
step5) do changes in spring bean cfq file according to the changes done in DataSource cfg

    // since jdbc properties are dynamically coming from properties file at runtime so there is no need of taking multiple DataSource cfg for multiple Db s/w just take one DataSource cfg change jdbc properties time to time to change the Db s/w.
    <?xml version="1.0" encoding="UTF-8"?>
    <beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

    <context:property-placeholder location="com/st/commons/jdbc.properties"/>

    <!-- DataSource cfg -->
    <bean id="drds"  class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${db.user}"/>
        <property name="password" value="${db.pwd}"/>
    </bean>
    
    
    
    <!-- DAO class cfg -->
    <bean id="empOraDAO"  class="com.st.dao.EmployeeOracleDAOImpl">
        <constructor-arg name="ds" ref="drds"/>
    </bean>
    <bean id="empMySqlDAO"  class="com.st.dao.EmployeeMySQLDAOImpl">
        <constructor-arg name="ds" ref="drds"/>
    </bean>
    
    <!-- service class cfg  -->
    <bean id="empService" class="com.st.service.EmployeeMgmtServiceImpl">
        <!--  <constructor-arg name="dao"  ref="empOraDAO"/> -->
        <constructor-arg name="dao"  ref="empMySqlDAO"/>
        <property name="osName" value="${os.name}"/>
        <property name="path"  value="${Path}"/> 
    </bean>
    
    <!-- controller cfg -->
    <bean id="controller"  class="com.st.controller.MainController">
        <constructor-arg name="service"  ref="empService"/>
    </bean>

    </beans>

step6) change BeanFactory container to ApplicationContext container in the Client App.

