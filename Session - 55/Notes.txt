
#####################################
Microservices Mini Project Implementation
#####################################

*********** Step- 1) Create Service Registry Application using Eureka Server *******************


1) Create Spring Boot app with below dependencies

 		a) 'Spring-cloud-starter-netflix-eureka-server' 
		b) web starter
		c) devtools

2) Configure @EnableEurekaServer annotation at boot start class

3) Configure below properties in application.yml file

server:
  port: 8761

eureka:
  client:
    register-with-eureka: false

4) Run the application and access in browser

		URL : http://localhost:8761/



*************************** Step-2 ) Create Spring Boot Application with Admin Server ************************************


1) Create Boot application with below dependencies

	a) web-starter
	b) devtools
	c) admin-server (code centric)

2) Configure @EnableAdminServer annotation at boot start class

3)  Configure Embedded Container Port Number (we can use any port)

4)  Run the application and access the application in browser

		URL : http://localhost:port/


*************************** Step-3)  Download & Run Zipkin Server *****************************************

1)  Download zipkin jar from below URL

	URL : https://search.maven.org/remote_content?g=io.zipkin&a=zipkin-server&v=LATEST&c=exec


2) Run the zipkin server jar file using below command

	$   java  -jar  <zipkin-server-jar>



************************** Step-4) Develop REST API (WELCOME API) **********************************

1) Create boot application with below dependencies


			- eureka-discovery-client
			- admin-client
			- zipkin client
			- sleuth (It is for logging)
			- web-starter
			- devtools
			- actuatoR


2) Configure @EnableDiscoveryClient annotation at start class (It will search and register with Eureka)

3) Create Rest Controller with required methods

4) Configure below properties in application.yml

			- server port
			- admin server url
			- actuator endpoints
			- application name

---
server:
  port: 8081
spring:
  application:
    name: WELCOME-API
  boot:
    admin:
      client:
        url: http://localhost:1111/
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
management:
  endpoints:
    web:
      exposure:
        include: '*'
...

5) Run the application and check Eureka Dashboard, Admin Server Dashboard and Zipkin Dashboard


*************************************Step-5) Develop REST API (GREET API)**********************************************


1) Create boot application with below dependencies

			- eureka-discovery-client
			- admin-client
			- zipkin client
			- sleuth (It is for logging)
			- web-starter
			- devtools
			- actuator
			- feign-client


2) Configure @EnableDiscoveryClient & @EnableFeignClients annotations at start class 

3) Create FeginClient to access WELCOME-API

@FeignClient(name = "WELCOME-API")
public interface WelcomeApiClient {

	@GetMapping("/welcome")
	public String invokeWelcomeApi();

}

4) Create Rest Controller with required methods

5) Configure below properties in application.yml

			- server port
			- admin server url
			- actuator endpoints
			- applicaion name

---
server:
  port: 9091
spring:
  application:
    name: GREET-API
  boot:
    admin:
      client:
        url: http://localhost:1111/
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
management:
  endpoints:
    web:
      exposure:
        include: '*'
...

6) Run the application and check Eureka Dashboard, Admin Server Dashboard and Zipkin Dashboard




***************************************Step-6 :: Develop API-Gateway Application****************************************************

1) Create boot application with below dependencies

		- cloud-gateway
		- eureka-client
		- web-starter
		- devtools


2) Configure @EnableDiscoveryClient annotation at boot start class


3) Configure Server Port & API Routings in application.yml file

---
server:
  port: 3333
spring:
  application:
    name: API-GATEWAY
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true
      routes:
      - id: one
        uri: lb://WELCOME-API
        predicates:
        - Path=/welcome
      - id: two
        uri: lb://GREET-API
        predicates:
        - Path=/greet
---

4) Run the application and Test it.


**********************************************************************************************************************

=> We can access Client sent request information using Filter

=> The client request information we can use to validate that request

-> Create below Filter in API Gateway (It will execute for every request)


@Component
public class MyPreFilter implements GlobalFilter {

	Logger logger = LoggerFactory.getLogger(MyPreFilter.class);

	@Override
	public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
		logger.info("filter() method executed....");

		// Access request information
		ServerHttpRequest request = exchange.getRequest();

		HttpHeaders headers = request.getHeaders();
		
		Set<String> keySet = headers.keySet();
		
		keySet.forEach(key -> {
			List<String> values = headers.get(key);
			System.out.println(key + "::" + values);
		});

		return chain.filter(exchange);
	}
}


-----------------------------------------------------------------------------------------------------------------------------

-> When we send request to REST API using POSTMAN, it will send POSTMAN Token in request header. Using this token we can differentiate request came from other apps or from POSTMAN.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------



###################
Load Balancing
###################

-> If we run our application on Single Server then all requests will be sent to single server
-> Burden will be increased on the server
-> When burden got increased request processing gets delayed
-> Sometimes our server might crash due to heavy load

********** To overcome above problems we will use Load Balancing concept *****************

-> Load Balancing is the process of distributing load to multiple servers


##################################
LBR implementation in Mini Project
#################################

-> Make below changes in WelcomeApi Rest Controller

@RestController
public class WelcomeRestController {

	@Autowired
	private Environment env;

	@GetMapping("/welcome")
	public String welcomeMsg() {

		String port = env.getProperty("server.port");

		String msg = "Welcome to Ashok IT..!!" + " (Port :: " + port + ")";

		return msg;
	}
}

-> Run Welcome API with 3 instances

			-> Righ Click on API
			-> Run As -> Run Configurations
			-> Select Application
			-> Arguments
			-> VM Arguments (-Dserver.port=8082)
			-> Apply & Run it


-> Check Eureka Dashboard



















