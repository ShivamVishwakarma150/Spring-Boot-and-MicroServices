========
Filters 
========


=> We can access Client sent request information using Filter

=> The client request information we can use to validate that request

-> Create below Filter in API Gateway (It will execute for every request)


@Component
public class MyPreFilter implements GlobalFilter {

	Logger logger = LoggerFactory.getLogger(MyPreFilter.class);

	@Override
	public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
		logger.info("filter() method executed....");

		// Access request information
		ServerHttpRequest request = exchange.getRequest();

		HttpHeaders headers = request.getHeaders();
		
		Set<String> keySet = headers.keySet();
		
		keySet.forEach(key -> {
			List<String> values = headers.get(key);
			System.out.println(key + "::" + values);
		});

		return chain.filter(exchange);
	}
}


-----------------------------------------------------------------------------------------------------------------------------

-> When we send request to REST API using POSTMAN, it will send POSTMAN Token in request header. Using this token we can differentiate request came from other apps or from POSTMAN.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------




###################
Load Balancing
###################

-> If we run our application on Single Server then all requests will be sent to single server
-> Burden will be increased on the server
-> When burden got increased request processing gets delayed
-> Sometimes our server might crash due to heavy load

********** To overcome above problems we will use Load Balancing concept *****************

-> Load Balancing is the process of distributing load to multiple servers


##################################
LBR implementation in Mini Project
#################################

-> Make below changes in WelcomeApi Rest Controller

@RestController
public class WelcomeRestController {

	@Autowired
	private Environment env;

	@GetMapping("/welcome")
	public String welcomeMsg() {

		String port = env.getProperty("server.port");

		String msg = "Welcome to Mumbai..!!" + " (Port :: " + port + ")";

		return msg;
	}
}

-> Run Welcome API with 3 instances

			-> Right Click on API
			-> Run As -> Run Configurations
			-> Select Application
			-> Arguments
			-> VM Arguments (-Dserver.port=8082)
			-> Apply & Run it


-> Check Eureka Dashboard


