######################## 
Microservices Architecture 
######################## 


-> Microservices is an architectural design pattern to develop our applications 

-> There is no fixed architecture for Microservices Based Applications 

-> People are customizing Microservices Architecture according to their requirement 

*********** Let us see generalized architecture of Microservices ***************


1) Service Registry 
2) Admin Server 
3) Zipkin Server 
4) Services (REST APIs) 
5) FeignClient 
6) API Gateway


ServiceRegistry
================

-> ServiceRegistry is used to register all our backend services/apis 

-> Service Registry will maintain services names, urls and status of each service 

-> We can use EurekaServer as a service registry

Note: EurekaServer provided by Spring Cloud Netflix Library


AdminServer
============


-> AdminServer is used to monitor and manage all our backend services at one place 

-> AdminServer will provide user interface to monitor and manage our services 

-> Using AdminServer user interface we can access Actuator Endpoints of our services at one place 

Note: AdminServer and Admin Client provided by 'Code Centric' company (we can integrate with boot)




ZipkinServer 
=============



-> ZipkinServer is used for Distributed Log Tracing 

-> ZipkinServer will provide user interface to monitor application execution details 

-> How many services involved and which service took more time to process the request can be monitored using Zipkin 

Note: Zipkin is third party open source server (can be integrated with spring boot)


Backend services
=================

-> Backend services are nothing but REST APIs (which are also called as Microservices) 

-> Backend REST APIs contains actual business logic of our application 

-> One project will have multiple REST APIs in the backend 

-> Each Backend api will act as client for Service Registry + Admin Server + Zipkin Server







-> With in the same application If one backend api communicating with another backend api then it is called as Interservice communication 

-> FeignClient will be used to perform Interservice Communication 

Note: Based on requirement our backend apis can communicate with 3rd party apis using RestTemplate or WebClient


-> Api Gateway will act as an Entry point for our backend apis 
-> It acts as mediator between end users and backend apis 
-> API Gateway contains Filters and Routing 
-> Filters we can use to authenticate incoming requests 
-> Routing will decide which request should go to which backend api 

Note: In previous versions we have Zuul Proxy as API Gateway but now it got removed from latest version of boot 

-> Spring Cloud Gateway we can use as API Gateway for our application





01:25:16