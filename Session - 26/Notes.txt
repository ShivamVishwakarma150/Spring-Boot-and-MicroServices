Find By Methods 
+++++++++++++++

-> Find By Methods are used to construct queries based on method name 

-> Method Name is very important to prepare query dynamically 

-> Based on our method name, JPA will prepare the query in Runtime and it will execute that query 

Syntax : findBy+entityClassVariableName (parameters ...) 

Note: findBy methods we will write in Repository interface ( abstract methods ) 

Ex: Retrieve user data based on country_name        
 
    findByCountry(String countryName); 

Ex : Retrieve user data based on user_age 

    findByAge(Integer age); 

Note: findByXXX methods are used for only Retrieval (SELECT ) operation.

++++++++++++++++++++++++++++++++ 
FindBy Methods Examples++++++++++++++++++++++++++++++++


public interface UserRepository extends  CrudRepository<User, Integer>{
	
	// select * from user_master where user_country=?;
	public List<User> findByCountry(String cname);
	
	// select * from user_master where user_age=?;
	public List<User> findByAge(Integer cage);
	
	// select * from user_master where user_age >= ?;
	public List<User> findByAgeGreaterThanEqual(Integer age);
	
	//select * from user_master where user_country in (?,?,? ...);
	public List<User> findByCountryIn(List<String> cname);
	
	// select * from user_master where user_country='India' and user_age=25;
	public List<User> findByCountryAndAge(String cname,Integer age);
	
	
	public List<User> findByCountryAndGender(String cname,String gender);
	
	// select * from user_master where user_country='India' and user_age=25 and user_gender='Male';
	public List<User> findByCountryAndAgeAndGender(String cname,Integer age,String gender);
	
	
}

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


++++++++++++++++
Custom Queries
++++++++++++++++

-> We can write our own query and we can execute that query using JPA that is called as Custom Query 

-> Custom Queries we can write in 2 ways
    1) HQL Queries 
    2) Native SQL Queries

Native SQL Vs HQL 
++++++++++++++++ 

SQL - Standard Query Language 
HQL - Hibernate Query Language

-> Native SQL queries are DB dependent 
-> HQL Queries are DB in-dependent 


-> Native Queries will use table name and column names in the query directly 
-> HQL queries will use 'Entity Class Name' and 'Entity Class Variable Names' in the query 


-> Native SQL queries will execute in Database Directly 
-> HQL queries can't execute in DB directly (HQL queries will be converted to SQL query using Dialect class before execution) 

Note: In Hibernate we have Dialect classes for every database 

-> As SQL queries are executing directly in DB hence performance wise they are good. HQL queries should be converted before execution hence HQL queries will take more time than SQL queries for execution. 


-> Performance wise SQL queries are good 
-> Maintenance wise HQL queries are good




# Retrieve all records from table 
SQL : SELECT * FROM USER_MASTER 
HQL : From User 



# Retrieve all records of users who are belongs to country 'India' 
SQL : SELECT * FROM USER_MASTER WHERE USER_COUNTRY = 'INDIA' 
HQL : From User where country='India' 



# Retrieve users who are belongs to 'India' and age is 25 
SQL : SELECT * FROM USER_MASTER where USER_COUNTRY='INDIA' AND USER_AGE =
25
HQL : From User where country='India' and age = 25 



# Retrieve User ID and User Name based on User Country 
SQL : select user_id, user_name from User_master where
user_country='India'; 
HQL : select userid, username from User where country='India'


Note: If we don't have projection then we can start HQL query with 'FROM' keyword. If we have projection then we need to start with 'SELECT' keyword 

Note: Projection means retrieving specific columns data from the table 

-> To write custom queries we will use @Query annotation in Repository interface


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

public interface UserRepository extends  CrudRepository<User, Integer>{
	
	@Query(value="From User")
	public List<User> getAllUsersHql();
	
	@Query(value="select * from user_master",nativeQuery=true)
	public List<User> getAllUsersSql();
	
	@Query(value="From User where country=:cname")
	public List<User> getAllUsersByCountry(String cname);
	
	@Query(value="From User where country=:cname and age=:age")
	public List<User> getAllUsersByCountryAndAge(String cname,Integer age);
	
}

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



