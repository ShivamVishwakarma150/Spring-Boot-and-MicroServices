
Singleton java class
=====================

=>The java class that allows us to create only one object in any situation is called singleton java class

=>Instead of creating multiple objects for java class having no data or fixed data or sharable data .. just create object and use it for multiple times .. In that situation it better to take java class as singleton java class.

pre-defined singleton classes in java api
------------------------------------------  
    a) java.lang.Runtime (Because one java app execution contains only 1 runtime)

    b) java.awt.Desktop ( Because one computer contains only 1 desktop)

    c) org.apache.log4j.Logger ( Every project wants to have single Logging mechanism for all classes) and etc..

=> Though java class allows to create more objects .. if some one is just creating only object for that class then that class is not called singleton java class..

eg:: Servlet comp class is not singleton java class .. because servlet comp class not having restruction on more objects creation.. the Servlet container just creating only one object and using it.   

=>For real singleton java class should returns already created object when we attempt to create more than object.


Developing Singleton java class with minimum standards 
=============================================


a) Take only one private 0-param constructor (To stop object creation out side the class using new operator)

b) Take public static factory method to check whether object is already created or not.. if created return existing object ref .. if not created, then create new object and return its reference.

c) Take private static variable of type current singleton class to hold the single object that will be created.. same variable will also be used in static factory method to check whether single object already created or not.



CODE 
====

//Printer.java (Singleton java class with minimum standards)
package com.st.ston;

public class Printer {
	 //static   variable  to hold reference of the single object
   private static Printer INSTANCE;
	private Printer() {
		System.out.println("Printer:: 0-param constructor (private)");
	}
	
	//static factory method
	public  static  Printer getInstance() {
		  //singleton logic
		if(INSTANCE==null)
			INSTANCE=new Printer();
		
		return INSTANCE;
		
	}
	
	//b.method
	public  void print(String msg) {
		System.out.println(msg);
	}
}


----------------------------------------------------------------------------------------------

package com.st.test;

import com.st.ston.Printer;

public class SingletonTest {

	public static void main(String[] args) {
		 Printer p1=Printer.getInstance();
		 Printer p2=Printer.getInstance();
		 System.out.println(p1.hashCode()+"  "+p2.hashCode());
		 System.out.println("----------------------------");
		 System.out.println("p1==p2 => "+(p1==p2));
		 

	}

}


==============================================================================================

=> IOC container can perform spring bean class instantiation using

    a) 0-param constructor ( if spring bean is cfg with no injections or with only setter injections)

    b) parameterized constructor ( if spring bean is cfg with constructor Injection)

    c)static factory method (if we specify "factory-method" attribute in <bean> tag)

    d)instance factory method (if we specify "factory-method", "factory-bean" attributes in <bean> tag)

=>The method that is capable returning its own class or related class or unrelated class obj is called factory method



Factory methods are two types
==============================

    a) static factory method
    b) instance factory method


examples for static factory methods
------------------------------------
// static factory method returning its own class object 
String s1=String.valueOf(10);
Thread t=Thread.currentThread();
Class c=Class.forName("java.util.Date");

// static method returning relevant class object (Calendar.getInstance() returns GregorianCalender class object whose super class is Calendar(AC))
Calendar cal=Calendar.getInstance();


// static factory method returning unrelated class object.
Properties props=System.getProperties();
Connection con=DriverManager.getConnection(-,-,-)


use cases :: In the impl of Factory Pattern, Singleton java class pattern

if class is having only private constructors, then we use static factory method of that class to get the object being from outside the class.

examples of instance factory methods
=====================================

use cases:: To create new objects using existing object and its data.

//Instance factory returning their own class objects
String s1=new String("hello");
String s2=s1.Concat("123"); //gives hello123 

String s1=new String("hello how are u");
String s2=s1.substring(0,5); //gives hello


// Instance factory method returning unrelated class obj because String,StringBuffer are not in inheritance relationship.
StringBuffer sb=new StringBuffer("hello ,how are u?");
String s1=sb.substring(0,5);

Date d = factory.getBean("d1",Date.class);
Statement st = con.createStatement();

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


applicationContext.xml 
----------------------

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-4.1.xsd">

<!-- static factory method returning its own class object -->
  <bean id="c1"  class="java.lang.Class"  factory-method="forName">  <!-- calls Class.forName("java.util.Date") method -->
       <constructor-arg value="java.util.Date"/>  <!-- not for constructor injection.. It is for passing factory method arg value -->
  </bean>
  
  
  
  
  
  
  <!-- static factory method returning relevant class object -->
  <bean id="cal"  class="java.util.Calendar" factory-method="getInstance"/> <!-- calls Calendar.getInstance() -->
    
    
    
    
    
    
    
  <!-- static factory method returning unrelated class object -->
  <bean id="props"  class="java.lang.System" factory-method="getProperties"/>  <!-- calls System.getProperties() -->
  
  
  
  
  
  
  
  <!-- instance factoty method returning its own class object-->
  <bean id="s1" class="java.lang.String">
      <constructor-arg value="hello"/>  <!-- for constructor injection -->
  </bean>
  
  <bean id="s2"  factory-bean="s1" factory-method="concat">  <!-- calls  s1.concat("123") method -->
      <constructor-arg  value="123"/>  <!-- To pass factory method arg value -->
  </bean>
  
  
  
  
  
  
  
  
  <!-- instance factoty method returning unrelated class object-->
  <bean id="sb" class="java.lang.StringBuffer">
      <constructor-arg value="hello,how are u"/>  <!-- for constructor injection -->
  </bean>
  
  
  <bean id="s3"  factory-bean="sb" factory-method="substring" >  <!-- calls sb.substring(0,5) -->
         <constructor-arg value="0"/>
         <constructor-arg value="5"/>
  </bean>
  
  
  

</beans>


FactoryMethodBeanInstantiationTest.java 
--------------------------------------


package com.st.test;

import java.util.Calendar;
import java.util.Properties;

import org.springframework.beans.factory.support.DefaultListableBeanFactory;
import org.springframework.beans.factory.xml.XmlBeanDefinitionReader;

public class FactoryMethodBeanInstantiationTest {

	public static void main(String[] args) {
		//create IOC container
		DefaultListableBeanFactory factory=new DefaultListableBeanFactory();
		XmlBeanDefinitionReader reader=new XmlBeanDefinitionReader(factory);
		reader.loadBeanDefinitions("com/st/cfgs/applicationContext.xml");
		//get Spring bean class obj
		Class clazz=factory.getBean("c1",Class.class);
		System.out.println("clazz obj  class name::"+clazz.getClass()+" clazz obj data"+clazz.toString());
		System.out.println("----------------------------------");
		Calendar cal=factory.getBean("cal",Calendar.class);
		System.out.println("cal obj  class name::"+cal.getClass()+" cal obj data"+cal.toString());
		System.out.println("-------------------------------------");
		Properties props=factory.getBean("props",Properties.class);
		System.out.println("props obj  class name::"+props.getClass()+" props obj data"+props.toString());
	 System.out.println("===================================");
	      String s2=factory.getBean("s2",String.class);
	      System.out.println("s2 obj class name::"+s2.getClass()+"  s2 obj data ::"+s2);
	      System.out.println("...........................................");
	      String s3=factory.getBean("s3",String.class);
	      System.out.println("s3 obj class name::"+s3.getClass()+"  s3 obj data ::"+s3);

	}

}


