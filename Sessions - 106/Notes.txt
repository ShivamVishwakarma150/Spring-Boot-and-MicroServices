When should we use java class as singleton java class or spring bean as singleton scope spring beans?
=====================================================================================================

a) if class is not having any state (No Member variables)

b) if class is having only read only state (final variables)

c) if class is having sharable state across multiple other classes (cache implementations)


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



a) if class is not having any state (No Member variables)
------------------------------------------

problem
=======

public class Arithmetic{
    public int sum(int a,int b){
        return a+b;
    }
}

// Two objects with no state is created
Arithmetic ar1 = new Arithmetic();
ar1.sum(10,20);
Arithmetic ar2=new Arithmetic();
ar2.sum(20,30);

=>creating multiple objects for same java class with out state is waste of memory and cpu time , Make the class singleton java class or singleton scope spring bean to minimize the memory consumption and cpu time.


Solution 1::
-------------


public class Arithmetic{
    private static Arithmetic INSTANCE;

    private Arithmetic(){ }
    public static Arithmetic getInstance(){
        if(INSTANCE==null)
            INSTANCE=new Arithmetic();
        return INSTANCE;
    }
    public int sum(int a,int b){
        return a+b;
    }

}

// Only ine object is create but used for two times.
Arithmetic ar1 = Arithmetic.getInstance();
ar1.sum(10,20);
Arithmetic ar2=new Arithmetic.getInstance();
ar2.sum(20,30);



Solution2::
++++++++++++

    applicationContext.xml
   ======================
    // Normal class with singleton scope 
    <bean id="ar" class="pkg.Arithmetic" scope="singleton"/>
    


    in Client App 
    =============

    Arithmetic ar=factory.getBean("ar",Arithmetic.class);
    ar.sum(10,20);

    Arithmetic ar1=factory.getBean("ar",Arithmetic.class);
    ar1.sum(10,20);



note:: To get singleton behavior in spring ,we need not to develope java class "singleton java class. we just need to cfg that java class as "singleton" scope spring bean as shown above.



------------------------------------------------------------------------------------------------------------------------------------------



b) if class is having only read only state (final variables)
===========================================

problem : Normal java class 
--------------------------

public class Circle{
    private final float PI=3.14f;

    public float CalcArea(float radius){
        return PI*radius*radius;
    }
}


// multiple creating objects with fixed state is waste of memory and waste of CPU time.
Circle circle = new Circle();
circle.CalcArea(10.0f);

Circle circle1=new Circle();
circle1.CalcArea(20.0f);


Solution1: singleton Java class 
-------------------------------

public class Circle {
    private final float PI=3.14f;
    private static Circle INSTANCE;

    private Circle(){

    }
    public static Circle getInstance(){
        if(INSTANCE==null)
            INSTANCE=new Circle();
        return INSTANCE;
    }
    public float calcArea(float radius){
        return PI*radius*radius;
    }
}

// Here one object is created and that will be used for multiple  times.
Circle circle1 = Circle.getInstance();
circle1.calcArea(10.0f);

Circle circle2 = Circle.getInstance();
circle2.calcArea(20.0f);


============================================================================

Solution2::

in applicationContext.xml 

    <bean id="circle" class="pkg.Circle" scope="singleton"/>

in Client App 
=============

    Circle circle1 = factory.getBean("circle",circle.class);
    circle1.calcArea(10.0f);

    Circle circle2 = factory.getBean("circle",circle.class);
    circle2.calcArea(20.0f);




--------------------------------------------------------------------------------------------------------------------------------------------------------




c) if class is having sharable state across multiple other classes (cache implementations)


Problem::

    public  class CacheMemory{
        private Map<string,Object> cacheMap=null;

        public CacheMemory(){
            CacheMap = new HashMap();

           // CacheMap ==> Represents cache
            ....
            ....// jdbc code get Countries from DB table and put them in cacheMap object 
            ....
            ....
        }

        public List<String> getCountries(String key){
            return (List<String> cacheMap.get(key)); 
         }
    }


CacheMemory memory1 = new CacheMemory();
List<String> countriesList1 = memory1.getCountry("country");

CacheMemory memory2 = new CacheMemory();
List<String> countriesList2 = memory2.getCountry("country");

----------------
Refer Notes.png 
----------------

creating multiple objects having same sharable data is waste of memory and waste of CPU time.




----------------------------------------------------------------------------------

solution1:: develop CacheMemory class singleton java class 

    public class CacheMemory{
        private static CacheMemory INSTANCE;

        private Map<string,Object> cacheMap=null;

        private CacheMemory(){
            CacheMap = new HashMap();

           // CacheMap ==> Represents cache
            ....
            ....// jdbc code get Countries from DB table and put them in cacheMap object 
            ....
            ....
        }

        private static CacheMemory getInstance(){
            if(INSTANCE==null){
                INSTANCE = new CacheMemory();
            }
            return INSTANCE;
        }

        public List<String> getCountries(String key){
            return (List<String> cacheMap.get(key)); 
         }

    }

    Client App 
    ==========

    CacheMemory memory1 = CacheMemory.getInstance();
    List<String> countriesList1 = memory1.getCountry("country");

    CacheMemory memory2 = CacheMemory.getInstance();
    List<String> countriesList2 = memory2.getCountry("country");

----------------
Refer Notes.png 
----------------




Solution2:: make Cache Memory class as spring bean having singleton scope
----------------------------------------

    in applicationContext.xml
    ---------------------------

    <bean id="memory" class="pkg.CacheMemory" scope="singleton"/>

    singleton scope spring beans in layered Apps


    Client App
    ----------


    CacheMemory memory1=factory.getBean("memory",CacheMemory.class);
    List<String> countriesList=memory1.getCountries("country");

    CacheMemory memory2=factory.getBean("memory",CacheMemory.class);
    List<String> countriesList=memory2.getCountries("country");


----------------
Refer Notes.png 
----------------


singleton scope spring beans in layered Apps 
=============================================


DataSource classes, DAO classes, service classes and controller class of spring layered app generally contains effectively read only i.e almost fixed state/read only state .. So it is recommended to take them singleton scope spring beans.

note: if u know how to use singleton scope of spring bean effectively ..then there is no need of implementing "singleton class" Design pattern in spring projects..





